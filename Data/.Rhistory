lines(p$EndTime,(p$DK1),type='l', col = 3)
source("R:/ØKONOMI/CONTROLLING/TOBR/Solcelleberegner/Nordpool/nordpoolspotr.R")
library(dplyr)
library(purrr)
# Get the Danish prices in DKK
p <- np_prices(time_unit = "daily", currency = "DKK", areas = c("DK1", "DK2"))
plot(p$DK1,type='l')
# function for indexing:
index_function <- function(x){
# input: x, a vector
# output: x_indexed, a vector
initial <- x[1]
x_indexed <- map_dbl(x, function(x){x/initial * 100})
return(x_indexed)
}
plot(p$StartTime, index_function(p$DK1),type='l', col = 2)
lines(p$StartTime,(p$DK1),type='l', col = 3)
source("R:/ØKONOMI/CONTROLLING/TOBR/Solcelleberegner/Nordpool/nordpoolspotr.R")
library(dplyr)
library(purrr)
# Get the Danish prices in DKK
p <- np_prices(time_unit = "daily", currency = "DKK", areas = c("DK1", "DK2"))
plot(p$DK1,type='l')
# function for indexing:
index_function <- function(x){
# input: x, a vector
# output: x_indexed, a vector
initial <- x[1]
x_indexed <- map_dbl(x, function(x){x/initial * 100})
return(x_indexed)
}
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime,index_function(p$DK1),type='l', col = 3)
plot(p$StartTime, (p$DK1),type='l', col = 2)
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(c('DK1','DK2'))
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(1, 95, legend=c("DK1", "DK2"),
col=c(2,3), lty=1:2, cex=0.8)
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(x = "topleft", legend=c("DK1", "DK2"),
col=c(2,3), lty=1:2, cex=0.8)
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(x = "topleft", legend=c("DK1", "DK2"),
col=c(2,3))
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(x = "topleft", legend=c("DK1", "DK2"),
col=c(2,3), lty=1:2)
plot(p$StartTime, (p$DK1),type='l', col = 2, lty )
plot(p$StartTime, (p$DK1),type='l', col = 2, lty = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(x = "topleft", legend=c("DK1", "DK2"),
col=c(2,3), lty=1:1)
plot(p$StartTime, (p$DK1),type='l', col = 2)
lines(p$StartTime, (p$DK2),type='l', col = 3)
legend(x = "topleft", legend=c("DK1", "DK2"),
col=c(2,3), lty=1:1)
source("R:/ØKONOMI/CONTROLLING/TOBR/Solcelleberegner/Nordpool/nordpoolspotr.R")
library(dplyr)
library(purrr)
# Get the Danish prices in DKK
p <- np_prices(time_unit = "daily", currency = "DKK", areas = c("DK1", "DK2"))
source("R:/ØKONOMI/CONTROLLING/TOBR/Solcelleberegner/Nordpool/nordpoolspotr.R")
library(dplyr)
library(purrr)
# Get the Danish prices in DKK
p <- np_prices(time_unit = "monthly", currency = "DKK", areas = c("DK1", "DK2"))
p$StartTime
source("R:/ØKONOMI/CONTROLLING/TOBR/Solcelleberegner/Nordpool/nordpoolspotr.R")
library(dplyr)
library(purrr)
# Get the Danish prices in DKK
p <- np_prices(time_unit = "hourly", currency = "DKK", areas = c("DK1", "DK2"))
source("R:/ØKONOMI/CONTROLLING/TOBR/Solcelleberegner/Nordpool/nordpoolspotr.R")
library(dplyr)
library(purrr)
# Get the Danish prices in DKK
p <- np_prices(time_unit = "daily", currency = "DKK", areas = c("DK1", "DK2"))
rm(list = ls())
# Get directory of file
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
dir
install.packages("installr")
library(installr)
updateR()
install.packages("rlang")
install.packages("rlang")
remove.packages(rlang)
remove.packages('rlang')
install.packages("rlang")
updateR()
library(installr)
suppressPackageStartupMessages(library(installr))
updateR()
updateR()
url <- 'https://www.proff.dk/nogletal/ncc-danmark-as/s%C3%B8borg/vand-og-kloak/15M2KBI10LD'
# Scrape Proff #
library(XML)
# Scrape Proff #
install.packages('XML')
# Scrape Proff #
library(XML)
url <- 'https://www.proff.dk/nogletal/ncc-danmark-as/s%C3%B8borg/vand-og-kloak/15M2KBI10LD'
sXpath <-'html/body/div/div/main/div/div[4]/div/div/div[1]/div[5]/div/div[1]/div/div[2]/div[3]/div/div/div/div[2]/span[1]/text()'
source <- readLines(url, encoding = "UTF-8")
parsed_doc <- htmlParse(source, encoding = "UTF-8")
xpathSApply(parsed_doc, path = sXpath, xmlValue)
source <- readLines(url, encoding = "UTF-8")
?readLines
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
source <- readLines(url)
url <- 'https://www.proff.dk/nogletal/ncc-danmark-as/søborg/vand-og-kloak/15M2KBI10LD'
sXpath <-'html/body/div/div/main/div/div[4]/div/div/div[1]/div[5]/div/div[1]/div/div[2]/div[3]/div/div/div/div[2]/span[1]/text()'
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
# Scrape Proff #
library(XML)
url <- 'https://vismarating.dk/firma/69894011-ncc-danmark-as'
sXpath <-'//*[@id="__layout"]/section/main/div[2]/div[2]/div[1]/div[1]/div/div/div/div[3]/div[3]/p'
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
sXpath <-'/html/body/div/div/section/main/div[2]/div[2]/div[1]/div[1]/div/div/div/div[3]/div[3]/p'
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
url <- 'https://vismarating.dk/firma/69894011'
sXpath <-'/html/body/div/div/section/main/div[2]/div[2]/div[1]/div[1]/div/div/div/div[3]/div[3]/p'
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
url <- 'https://vismarating.dk/firma/42347361'
sXpath <-'/html/body/div/div/section/main/div[2]/div[2]/div[1]/div[1]/div/div/div/div[3]/div[3]/p'
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
url <- 'https://vismarating.dk/firma/42347361'
sXpath <-'//*[@id="__layout"]/section/main/div[2]/div[2]/div[1]/div[1]/div/div/div/div[2]/div[3]/p'
source <- readLines(url)
parsed_doc <- htmlParse(source)
xpathSApply(parsed_doc, path = sXpath, xmlValue)
# Given string
str <- xpathSApply(parsed_doc, path = sXpath, xmlValue)
# Use gsub to extract the number
number_str <- gsub("[^0-9-]", "", str)
# Convert the extracted string to numeric
number <- as.numeric(number_str)
# Print the result
print(number)
url <- 'https://vismarating.dk/firma/69894011'
sXpath <-'//*[@id="__layout"]/section/main/div[2]/div[2]/div[1]/div[1]/div/div/div/div[2]/div[3]/p'
source <- readLines(url)
parsed_doc <- htmlParse(source)
# Given string
str <- xpathSApply(parsed_doc, path = sXpath, xmlValue)
# Use gsub to extract the number
number_str <- gsub("[^0-9-]", "", str)
# Convert the extracted string to numeric
number <- as.numeric(number_str)
# Print the result
print(number)
## Contribution Margin ##
margin_dag <- dagify(margin ~ revenue + costs + depreciation,
revenue ~ other_WIP + progress,
depreciation ~ job + customer + risk,
costs ~ goods + labor,
goods ~ inflation + extra + waste,
waste ~ efficiency_risk + overrun_risk,
labor ~ billable_rate + extra,
inflation ~ interest_rate,
interest_rate ~ gdp + unemployment,
extra ~ change_in_scope,
billable_rate ~ illness + efficiency_risk,
risk ~ efficiency_risk + overrun_risk,
labels = c(
"margin" = "Contribution \n Margin",
"revenue" = "Revenue",
"costs" = "Costs",
"depreciation" = "Depreciation",
"other_WIP" = "Other WIP",
"progress" = "Progress \n of Job",
"job" = "Job",
"customer" = "Customer",
"risk" = "Risk",
"efficiency_risk" = "Risk of \n Inefficiency",
"overrun_risk" = "Risk of \n Overruns",
"goods" = "Goods",
"labor" = "Labor",
"waste" = "Time-waste",
"billable_rate" = "Billable rate",
"extra" = "Extra work",
"interest_rate" = "Interest Rate",
"inflation" = "Inflation",
"gdp" = "GDP",
"unemployment" = "Unemployment",
"change_in_scope" = "Change \n in Scope",
"illness" = "Illness"
),
latent = c("efficiency_risk","overrun_risk"),
exposure = "risk",
outcome = "margin"
) %>%
tidy_dagitty() %>%
mutate(colour = ifelse(grepl("risk",name), "Unobserved", "Observed"))
library(ggdag)
library(ggplot2)
library(ggthemes)
library(dplyr)
dir <- "C:/Users/tobr/OneDrive - NRGi A S/Projekter/ProjectBasedInternship/Data"
setwd(dir)
# Source theme_elcon
invisible(source('theme_elcon.R'))
theme_set(theme_dag())
## Contribution Margin ##
margin_dag <- dagify(margin ~ revenue + costs + depreciation,
revenue ~ other_WIP + progress,
depreciation ~ job + customer + risk,
costs ~ goods + labor,
goods ~ inflation + extra + waste,
waste ~ efficiency_risk + overrun_risk,
labor ~ billable_rate + extra,
inflation ~ interest_rate,
interest_rate ~ gdp + unemployment,
extra ~ change_in_scope,
billable_rate ~ illness + efficiency_risk,
risk ~ efficiency_risk + overrun_risk,
labels = c(
"margin" = "Contribution \n Margin",
"revenue" = "Revenue",
"costs" = "Costs",
"depreciation" = "Depreciation",
"other_WIP" = "Other WIP",
"progress" = "Progress \n of Job",
"job" = "Job",
"customer" = "Customer",
"risk" = "Risk",
"efficiency_risk" = "Risk of \n Inefficiency",
"overrun_risk" = "Risk of \n Overruns",
"goods" = "Goods",
"labor" = "Labor",
"waste" = "Time-waste",
"billable_rate" = "Billable rate",
"extra" = "Extra work",
"interest_rate" = "Interest Rate",
"inflation" = "Inflation",
"gdp" = "GDP",
"unemployment" = "Unemployment",
"change_in_scope" = "Change \n in Scope",
"illness" = "Illness"
),
latent = c("efficiency_risk","overrun_risk"),
exposure = "risk",
outcome = "margin"
) %>%
tidy_dagitty() %>%
mutate(colour = ifelse(grepl("risk",name), "Unobserved", "Observed"))
ggdag(margin_dag, text = F, use_labels = "label", stylized = T)
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag_butterfly_bias(margin_dag)
ggdag_exogenous(margin_dag)
ggdag(margin_dag, text = F, use_labels = "label", stylized = T)
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T)
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3]))
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour))
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_text()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour)) +
geom_dag_text()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour))
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
# scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_point(aes(colour = colour))
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag(margin_dag, text = F, use_labels = "label", stylized = T)
ggdag(margin_dag, text = F, use_labels = "label", stylized = F)
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = T) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
## Contribution Margin ##
margin_dag <- dagify(margin ~ revenue + costs + depreciation,
revenue ~ other_WIP + progress,
depreciation ~ job + customer + risk,
costs ~ goods + labor,
goods ~ inflation + extra + waste,
labor ~ billable_rate + extra,
inflation ~ interest_rate,
interest_rate ~ gdp + unemployment,
extra ~ change_in_scope,
billable_rate ~ illness + efficiency_risk,
risk ~ efficiency_risk + overrun_risk,
labels = c(
"margin" = "Contribution \n Margin",
"revenue" = "Revenue",
"costs" = "Costs",
"depreciation" = "Depreciation",
"other_WIP" = "Other WIP",
"progress" = "Progress \n of Job",
"job" = "Job",
"customer" = "Customer",
"risk" = "Risk",
"efficiency_risk" = "Risk of \n Inefficiency",
"overrun_risk" = "Risk of \n Overruns",
"goods" = "Goods",
"labor" = "Labor",
"waste" = "Time-waste",
"billable_rate" = "Billable rate",
"extra" = "Extra work",
"interest_rate" = "Interest Rate",
"inflation" = "Inflation",
"gdp" = "GDP",
"unemployment" = "Unemployment",
"change_in_scope" = "Change \n in Scope",
"illness" = "Illness"
),
latent = c("efficiency_risk","overrun_risk"),
exposure = "risk",
outcome = "margin"
) %>%
tidy_dagitty() %>%
mutate(colour = ifelse(grepl("risk",name), "Unobserved", "Observed"))
ggdag(margin_dag, text = F, use_labels = "label", stylized = F)
## Contribution Margin ##
margin_dag <- dagify(margin ~ revenue + costs + depreciation,
revenue ~ other_WIP + progress,
depreciation ~ job + customer + risk,
costs ~ goods + labor,
goods ~ inflation + extra + overrun_risk,
labor ~ billable_rate + extra,
inflation ~ interest_rate,
interest_rate ~ gdp + unemployment,
extra ~ change_in_scope,
billable_rate ~ illness + efficiency_risk,
risk ~ efficiency_risk + overrun_risk,
labels = c(
"margin" = "Contribution \n Margin",
"revenue" = "Revenue",
"costs" = "Costs",
"depreciation" = "Depreciation",
"other_WIP" = "Other WIP",
"progress" = "Progress \n of Job",
"job" = "Job",
"customer" = "Customer",
"risk" = "Risk",
"efficiency_risk" = "Risk of \n Inefficiency",
"overrun_risk" = "Risk of \n Overruns",
"goods" = "Goods",
"labor" = "Labor",
"waste" = "Time-waste",
"billable_rate" = "Billable rate",
"extra" = "Extra work",
"interest_rate" = "Interest Rate",
"inflation" = "Inflation",
"gdp" = "GDP",
"unemployment" = "Unemployment",
"change_in_scope" = "Change \n in Scope",
"illness" = "Illness"
),
latent = c("efficiency_risk","overrun_risk"),
exposure = "risk",
outcome = "margin"
) %>%
tidy_dagitty() %>%
mutate(colour = ifelse(grepl("risk",name), "Unobserved", "Observed"))
ggdag(margin_dag, text = F, use_labels = "label", stylized = F)
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F) +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, use_labels = "label", stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
geom_dag_edges_arc(edge_color = "black", curvature = 0) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
geom_dag_edges_arc(edge_color = "black", curvature = 5) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
geom_dag_edges_arc(edge_color = "black", curvature = 1) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
geom_dag_edges_arc(edge_color = "black", curvature = 1) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
scale_dag(breaks = ggplot2::waiver()) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
geom_dag_edges_arc(edge_color = "black", curvature = 1) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
ggdag::ggdag(margin_dag, text = F, stylized = F,
edge_type = "link_arc") +
theme(legend.title = element_blank()) +
geom_dag_point(aes(colour = colour)) +
geom_dag_label_repel(aes(label = label), colour = "black", show.legend = FALSE) +
geom_dag_edges_arc(edge_color = "black", curvature = 0.5) +
scale_color_manual(values=c(vColor[1], vColor[3])) +
geom_dag_edges()
